{
  "name": "downshift-combobox",
  "type": "registry:ui",
  "registryDependencies": [
    "input",
    "popover",
    "scroll-area"
  ],
  "dependencies": [
    "downshift"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {}
  },
  "cssVars": {},
  "files": [
    {
      "path": "src/components/Combobox/Combobox.tsx",
      "content": "import {\n  useCallback,\n  useEffect,\n  useState,\n  type PropsWithChildren,\n} from 'react';\nimport { useCombobox, type UseComboboxProps } from 'downshift';\n\nimport { Popover } from '@/components/ui/popover';\n\nimport { ComboboxContext } from './context';\nimport type { ComboboxItemBase } from './types';\n\nconst { stateChangeTypes } = useCombobox;\n\nconst defaultFilter = (inputValue: string, items: ComboboxItemBase[]) =>\n  items.filter(\n    item =>\n      !inputValue || item.label.toLowerCase().includes(inputValue.toLowerCase())\n  );\n\nexport type ComboboxProps = PropsWithChildren<{\n  value?: string | null;\n  onValueChange?: (value: string | null) => void;\n  filterItems?: (\n    inputValue: string,\n    items: ComboboxItemBase[]\n  ) => ComboboxItemBase[];\n}>;\n\nexport const ComboBox = ({\n  value,\n  onValueChange,\n  filterItems = defaultFilter,\n  children,\n}: ComboboxProps) => {\n  const [items, setItems] = useState<ComboboxItemBase[]>([]),\n    [filteredItems, setFilteredItems] = useState<ComboboxItemBase[]>(items);\n  const [openedOnce, setOpenedOnce] = useState(false);\n\n  const stateReducer = useCallback<\n    NonNullable<UseComboboxProps<ComboboxItemBase>['stateReducer']>\n  >(\n    (prev, { type, changes }) => {\n      switch (type) {\n        case stateChangeTypes.InputChange: {\n          const filteredEnabledItems = filterItems(\n            changes.inputValue || prev.inputValue,\n            items\n          ).filter(({ disabled }) => !disabled);\n          const highlightedIndex =\n            typeof changes.highlightedIndex === 'number'\n              ? changes.highlightedIndex\n              : prev.highlightedIndex;\n\n          return {\n            ...changes,\n            highlightedIndex:\n              changes.inputValue &&\n              filteredEnabledItems.length > 0 &&\n              highlightedIndex < 0\n                ? 0\n                : changes.highlightedIndex,\n          };\n        }\n\n        case stateChangeTypes.InputBlur:\n        case stateChangeTypes.InputClick:\n        case stateChangeTypes.InputKeyDownEnter:\n        case stateChangeTypes.InputKeyDownEscape: {\n          if (changes.isOpen || !prev.isOpen)\n            return {\n              ...changes,\n              inputValue: prev.inputValue,\n              selectedItem: prev.selectedItem,\n            };\n          if (!prev.inputValue && prev.highlightedIndex < 0)\n            return { ...changes, inputValue: '', selectedItem: null };\n\n          const inputValue =\n            changes.selectedItem?.label || prev.selectedItem?.label || '';\n          return { ...changes, inputValue };\n        }\n\n        default:\n          return changes;\n      }\n    },\n    [filterItems, items]\n  );\n\n  const {\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    selectedItem,\n    selectItem,\n    setInputValue,\n  } = useCombobox({\n    items: filteredItems,\n    itemToString: item => (item ? item.label : ''),\n    isItemDisabled: item => item.disabled ?? false,\n\n    selectedItem:\n      typeof value !== 'undefined'\n        ? items.find(item => item.value === value) || null\n        : undefined,\n    onSelectedItemChange: ({ selectedItem }) =>\n      onValueChange?.(selectedItem?.value || null),\n\n    stateReducer,\n  });\n\n  useEffect(() => {\n    if (isOpen && !openedOnce) setOpenedOnce(isOpen);\n  }, [isOpen, openedOnce]);\n\n  useEffect(() => {\n    setFilteredItems(filterItems(inputValue, items));\n  }, [filterItems, inputValue, items]);\n\n  return (\n    <ComboboxContext.Provider\n      value={{\n        filteredItems,\n        getInputProps,\n        getItemProps,\n        getMenuProps,\n        highlightedIndex,\n        inputValue,\n        isOpen,\n        items,\n        onItemsChange: setItems,\n        onValueChange,\n        openedOnce,\n        selectedItem,\n        selectItem,\n        setInputValue,\n      }}\n    >\n      <Popover open={isOpen}>{children}</Popover>\n    </ComboboxContext.Provider>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/Combobox/ComboboxContent.tsx",
      "content": "import {\n  Children,\n  isValidElement,\n  useEffect,\n  useMemo,\n  type ComponentPropsWithoutRef,\n  type ReactElement,\n} from 'react';\n\nimport { PopoverContent } from '@/components/ui/popover';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { cn } from '@/lib/utils';\n\nimport { useComboboxContext } from './context';\nimport { ComboboxItem, type ComboboxItemProps } from './ComboboxItem';\n\nexport const ComboboxContent = ({\n  onOpenAutoFocus,\n  children,\n  ...props\n}: ComponentPropsWithoutRef<typeof PopoverContent>) => {\n  const { getMenuProps, isOpen, openedOnce, onItemsChange } =\n    useComboboxContext();\n\n  const childItems = useMemo(\n    () =>\n      Children.toArray(children).filter(\n        (child): child is ReactElement<ComboboxItemProps> =>\n          isValidElement(child) && child.type === ComboboxItem\n      ),\n    [children]\n  );\n\n  useEffect(() => {\n    onItemsChange?.(\n      childItems.map(child => ({\n        disabled: child.props.disabled,\n        label: child.props.label,\n        value: child.props.value,\n      }))\n    );\n  }, [childItems, onItemsChange]);\n\n  return (\n    <PopoverContent\n      {...props}\n      forceMount\n      asChild\n      onOpenAutoFocus={e => {\n        e.preventDefault();\n        onOpenAutoFocus?.(e);\n      }}\n      className={cn(\n        'w-[--radix-popper-anchor-width] p-0 [[data-radix-popper-content-wrapper]:has(&)]:h-0',\n        !isOpen && 'pointer-events-none',\n        !openedOnce && 'hidden'\n      )}\n      {...getMenuProps?.()}\n    >\n      <ScrollArea className='[&>[data-radix-scroll-area-viewport]]:max-h-80 [&>[data-radix-scroll-area-viewport]]:p-1'>\n        {children}\n      </ScrollArea>\n    </PopoverContent>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/Combobox/ComboboxEmpty.tsx",
      "content": "import type { ComponentPropsWithoutRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { useComboboxContext } from './context';\n\nexport const ComboboxEmpty = ({\n  className,\n  children,\n  ...props\n}: ComponentPropsWithoutRef<'div'>) => {\n  const { filteredItems } = useComboboxContext();\n  if (filteredItems && filteredItems.length > 0) return null;\n\n  return (\n    <div\n      {...props}\n      className={cn('p-4 text-center text-sm text-muted-foreground', className)}\n    >\n      {children}\n    </div>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/Combobox/ComboboxInput.tsx",
      "content": "import type { ComponentPropsWithoutRef } from 'react';\nimport type { UseComboboxGetInputPropsReturnValue } from 'downshift';\nimport { PopoverAnchor } from '@radix-ui/react-popover';\nimport { ChevronDownIcon } from 'lucide-react';\n\nimport { Input } from '@/components/ui/input';\n\nimport { useComboboxContext } from './context';\n\nexport type ComboboxInputProps = Omit<\n  ComponentPropsWithoutRef<'input'>,\n  keyof UseComboboxGetInputPropsReturnValue\n>;\n\nexport const ComboboxInput = (props: ComboboxInputProps) => {\n  const { getInputProps } = useComboboxContext();\n\n  return (\n    <div className='relative w-full' data-combobox-input-wrapper=''>\n      <PopoverAnchor asChild>\n        <Input {...props} {...getInputProps?.()} />\n      </PopoverAnchor>\n      <div className='pointer-events-none absolute inset-y-0 end-3 grid h-full place-items-center'>\n        <ChevronDownIcon className='size-4 opacity-50' />\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/Combobox/ComboboxItem.tsx",
      "content": "import { useMemo, type ComponentPropsWithoutRef } from 'react';\nimport { CircleIcon } from 'lucide-react';\n\nimport { useComboboxContext } from './context';\nimport { cn } from '@/lib/utils';\n\nimport type { ComboboxItemBase } from './types';\n\nexport type ComboboxItemProps = ComboboxItemBase &\n  ComponentPropsWithoutRef<'li'>;\n\nexport const ComboboxItem = ({\n  label,\n  value,\n  disabled,\n  className,\n  children,\n  ...props\n}: ComboboxItemProps) => {\n  const { filteredItems, getItemProps, selectedItem } = useComboboxContext();\n\n  const isSelected = selectedItem?.value === value;\n  const item = useMemo(\n    () => ({ disabled, label, value }),\n    [disabled, label, value]\n  );\n  const index = (filteredItems || []).findIndex(\n    item => item.value.toLowerCase() === value.toLowerCase()\n  );\n  if (index < 0) return null;\n\n  return (\n    <li\n      {...props}\n      data-index={index}\n      className={cn(\n        `relative flex cursor-default select-none flex-col rounded-sm px-3 py-1.5 aria-disabled:pointer-events-none aria-disabled:opacity-50 aria-selected:bg-accent aria-selected:text-accent-foreground`,\n        !children && 'ps-8',\n        className\n      )}\n      {...getItemProps?.({ item, index })}\n    >\n      {children || (\n        <>\n          <span className='text-sm text-foreground'>{label}</span>\n          {isSelected && (\n            <span className='absolute start-3 top-0 flex h-full items-center justify-center'>\n              <CircleIcon className='size-2 fill-current' />\n            </span>\n          )}\n        </>\n      )}\n    </li>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/Combobox/context.ts",
      "content": "import { createContext, useContext } from 'react';\nimport type { UseComboboxReturnValue } from 'downshift';\n\nimport type { ComboboxItemBase } from './types';\n\nexport type ComboboxContextValue = Partial<\n  Pick<\n    UseComboboxReturnValue<ComboboxItemBase>,\n    | 'getInputProps'\n    | 'getItemProps'\n    | 'getMenuProps'\n    | 'highlightedIndex'\n    | 'inputValue'\n    | 'isOpen'\n    | 'selectedItem'\n    | 'selectItem'\n    | 'setInputValue'\n  > & {\n    filteredItems: ComboboxItemBase[];\n    items: ComboboxItemBase[];\n    onItemsChange: (items: ComboboxItemBase[]) => void;\n    onValueChange: (value: string | null) => void;\n    openedOnce: boolean;\n  }\n>;\n\nexport const ComboboxContext = createContext<ComboboxContextValue>({});\n\nexport const useComboboxContext = () => useContext(ComboboxContext);\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/Combobox/index.ts",
      "content": "export * from './Combobox';\nexport * from './ComboboxContent';\nexport * from './ComboboxEmpty';\nexport * from './ComboboxInput';\nexport * from './ComboboxItem';\nexport * from './context';\nexport * from './types';\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/Combobox/types.ts",
      "content": "export type ComboboxItemBase = {\n  label: string;\n  value: string;\n  disabled?: boolean;\n};\n",
      "type": "registry:ui"
    }
  ]
}